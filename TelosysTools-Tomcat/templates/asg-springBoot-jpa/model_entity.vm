## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )

/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};
#set( $currentClassName = "${entity.name}" )
import java.io.Serializable;
#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
#foreach( $import in $jpa.imports($entity))
import $import;
#end

$jpa.entityAnnotations(0, $entity)
@NamedQueries ( {
  @NamedQuery ( name="${entity.name}.selectAll", query="SELECT x FROM ${entity.name} x" )
} )
public class $currentClassName implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY KEY ATTRIBUTES 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes)
##$field.jpaAnnotationsEmbeddedID(4)
$jpa.fieldAnnotations(4, $field)
	@GeneratedValue(generator = "$fn.uncapitalize(${entity.name})Sequence", strategy = GenerationType.SEQUENCE)
	@SequenceGenerator(name = "$fn.uncapitalize(${entity.name})Sequence", sequenceName = "${entity.databaseTable}_SEQ", initialValue = 1, allocationSize = 1)
	private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} 
#end;
 
    
#end


#foreach( $field in $entity.nonKeyAttributes)
##$field.jpaAnnotationsEmbeddedID(4)
$jpa.fieldAnnotations(4, $field)
	private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} 
#end;

#end

    //----------------------------------------------------------------------
    // CONSTRUCTORS
    //----------------------------------------------------------------------
    public $currentClassName() {
        super();
    }

    public ${currentClassName}( $fn.argumentsListWithType($entity.attributes) ) {
        super();
#foreach( $field in $entity.attributes )
        this.$field.name = $field.name ;
#end
    }
    
    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR KEY FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.attributes )
#if ( $field.databaseName ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type value ) {
        this.$field.name = value;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end

#end  

    //----------------------------------------------------------------------
    // equals METHOD
    //----------------------------------------------------------------------
$java.equalsMethod($currentClassName, $entity.attributes )

    //----------------------------------------------------------------------
    // hashCode METHOD
    //----------------------------------------------------------------------
$java.hashCodeMethod($currentClassName, $entity.attributes )

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() {
		StringBuffer sb = new StringBuffer(); 
#set( $count = 0 )
#foreach( $field in $entity.attributes )
#if( $count > 0 )
		sb.append("|"); 
#end
		sb.append($field.name); 
#set( $count = $count + 1 )
#end  
        return sb.toString();
    }

    //----------------------------------------------------------------------
    // toJSON METHOD
    //----------------------------------------------------------------------
    public String toJSON() {
		StringBuffer sb = new StringBuffer();
		sb.append("{");
#set( $count = 1 )
#foreach( $field in $entity.attributes )
#if($count == $entity.attributesCount)
		sb.append($field.name);
#else
		sb.append($field.name + ", ");
#end
#set( $count = $count + 1 )
#end  
        sb.append("}");
		return sb.toString();
    }

}
