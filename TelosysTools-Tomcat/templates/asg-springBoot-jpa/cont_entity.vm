/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder($SRC)};

#set( $currentClassName = "${entity.name}Controller")
#set( $implementer = "${entity.name}Repository")
#set( $uncapitalizedimpl = $fn.uncapitalize($implementer) )

import ${ROOT_PKG}.model.${entity.name};
import ${ROOT_PKG}.repository.$implementer;
import java.util.List;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/$fn.uncapitalize(${entity.name})")
public class $currentClassName {

	private $implementer $uncapitalizedimpl;

/** Constructor **/

	public $currentClassName($implementer $uncapitalizedimpl){
		this.$uncapitalizedimpl = $uncapitalizedimpl;		
	}
		
	
	@GetMapping("")
	public List<${entity.name}> get${entity.name}(){
		return $uncapitalizedimpl .findAll();
	}

	@GetMapping("/{id}")
	public ${entity.name} get${entity.name}ById(@PathVariable #foreach($field in $entity.keyAttributes) $field.type $field.name #end){
		return $uncapitalizedimpl .findById(#foreach($field in $entity.keyAttributes) $field.name #end)
												.orElseThrow(() -> new IllegalArgumentException("Data Not Found with Id : " + #foreach($field in $entity.keyAttributes) $field.name #end));
	}	

	@PostMapping("")
	public ${entity.name} insert${entity.name}(@RequestBody ${entity.name} $fn.uncapitalize(${entity.name})){
		if ($fn.uncapitalize(${entity.name}).#foreach($field in $entity.keyAttributes) ${field.getter}() #end != null) {
			throw new IllegalStateException("Can not create an existing ${entity.name} with Id " + $fn.uncapitalize(${entity.name}).#foreach($field in $entity.keyAttributes) ${field.getter}() #end);
		}
		return $uncapitalizedimpl .save($fn.uncapitalize(${entity.name}));
	}

	@PutMapping("")
	public ${entity.name} update${entity.name}(@RequestBody ${entity.name} $fn.uncapitalize(${entity.name})) {
		if ($fn.uncapitalize(${entity.name}).#foreach($field in $entity.keyAttributes) ${field.getter}() #end == null) {
			throw new IllegalStateException("Can not update a ${entity.name} with no Id");
		}
		if ($uncapitalizedimpl .findById($fn.uncapitalize(${entity.name}).#foreach($field in $entity.keyAttributes) ${field.getter}() #end).isPresent() == false) {
			throw new IllegalArgumentException("No ${entity.name} found with Id : " + $fn.uncapitalize(${entity.name}).#foreach($field in $entity.keyAttributes) ${field.getter}() #end);
		}
		return $uncapitalizedimpl .save($fn.uncapitalize(${entity.name}));
	}


	@DeleteMapping("/{id}")
	public void deleteCustomer(@PathVariable #foreach($field in $entity.keyAttributes) $field.type $field.name #end) {
		$uncapitalizedimpl .deleteById(#foreach($field in $entity.keyAttributes) $field.name #end);
	}
	
}
